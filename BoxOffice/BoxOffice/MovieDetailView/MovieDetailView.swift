//
//  MovieDetailView.swift
//  BoxOffice
//
//  Created by unchain on 2023/01/02.
//

import SwiftUI

struct MovieDetailView: View {
    @Environment(\.presentationMode) var presentationMode
    var boxOfficeMovie: BoxOfficeMovie
    @State var isPresented = false
    @ObservedObject var viewModel = MovieDetailViewModel()
    @ObservedObject var rankViewModel: MovieRankViewModel

    var body: some View {
        List {
            Section(footer: HStack {
                Button(action: {
                    isPresented = true
                }, label: {
                    ZStack {
                        Rectangle()
                            .frame(width: 170, height: 40)
                            .cornerRadius(10)
                            .shadow(radius: 5)
                        Text("üñãÔ∏è Î¶¨Î∑∞ Îì±Î°ùÌïòÍ∏∞")
                            .foregroundColor(.white)
                    }
                })
                .fullScreenCover(isPresented: $isPresented) {
                    MovieReviewPostView(isPresented: $isPresented)
                }

                Button(action: {
                    let sharePoster =  rankViewModel.posters[(Int(boxOfficeMovie.rank) ?? 0) - 1]
                    let shareInformation = """
                                            ÏòÅÌôîÎ™Ö: \(boxOfficeMovie.movieName)
                                            Î∞ïÏä§Ïò§ÌîºÏä§ ÏàúÏúÑ: \(boxOfficeMovie.rank)
                                            Í∞úÎ¥âÏùº: \(boxOfficeMovie.openDate)
                                            Í¥ÄÍ∞ùÏàò: \(boxOfficeMovie.audienceAttendance)
                                            Ï†ÑÏùºÎåÄÎπÑ ÏàúÏúÑ: \(boxOfficeMovie.rankIncrease)
                                            Îû≠ÌÇπÏóê Ïã†Í∑úÏßÑÏûÖ Ïó¨Î∂Ä: \(boxOfficeMovie.isNewRanked)
                                            Ï†úÏûëÏó∞ÎèÑ: \(viewModel.detailInformation.productionYear)
                                            Í∞úÎ¥âÏó∞ÎèÑ: \(viewModel.detailInformation.openDate)
                                            ÏÉÅÏòÅÏãúÍ∞Ñ: \(viewModel.detailInformation.showTime)
                                            Ïû•Î•¥: \(viewModel.detailInformation.genres)
                                            Í∞êÎèÖÎ™Ö: \(viewModel.detailInformation.directors)
                                            Î∞∞Ïö∞Î™Ö: \(viewModel.detailInformation.actors)
                                            Í¥ÄÎûåÎì±Í∏â: \(viewModel.detailInformation.audits)
                                            Î¶¨Î∑∞ Î≥ÑÏ†ê ÌèâÍ∑†: 4.4
                                            Î¶¨Î∑∞Î¶¨Ïä§Ìä∏:?
                                            """
                    let activityVC = UIActivityViewController(activityItems: [sharePoster as Any ,shareInformation], applicationActivities: nil)
                    UIApplication.shared.windows.first?.rootViewController!.present(activityVC, animated: true, completion: nil)
                }, label: {
                    ZStack {
                        Rectangle()
                            .frame(width: 170, height: 40)
                            .cornerRadius(10)
                            .shadow(radius: 5)
                        Text("Í≥µÏú†ÌïòÍ∏∞")
                            .foregroundColor(.white)
                    }
                })
            }) {
                VStack(alignment: .leading) {
                    Image(uiImage: rankViewModel.posters[(Int(boxOfficeMovie.rank) ?? 0) - 1])
                        .resizable()
                        .aspectRatio(1.4, contentMode: .fit)
                        .padding(EdgeInsets(top: 5, leading: 10, bottom: 0, trailing: 0))
                    MovieInformationView(movieDetail: viewModel.detailInformation, boxOfficeMovie: boxOfficeMovie)
                }
                VStack(alignment: .leading) {
                    HStack {
                        Rectangle()
                            .frame(width: 4, height: 20)
                            .foregroundColor(.red)
                        Text("Î∞ïÏä§Ïò§ÌîºÏä§ ÏàúÏúÑ")
                            .bold()
                            .font(.title3)
                    }
                    HStack {
                        Text("ÌòÑÏû¨ ÏàúÏúÑ:")
                            .foregroundColor(.gray)
                            .shadow(radius: 0.2)
                        Text(boxOfficeMovie.rank + "ÏúÑ")
                            .bold()
                    }
                    HStack {
                        Text("Ï†ÑÏùº ÎåÄÎπÑ:")
                            .foregroundColor(.gray)
                            .shadow(radius: 0.2)
                        if Int(boxOfficeMovie.rankIncrease) == 0 {
                            Rectangle()
                                .frame(width: 13, height: 2)
                        } else if Int(boxOfficeMovie.rankIncrease) ?? 0 > 0 {
                            HStack(spacing: 2) {
                                Text("‚Üë")
                                    .foregroundColor(.red)
                                    .bold()
                                Text(boxOfficeMovie.rankIncrease)
                            }
                        } else {
                            HStack(spacing: 2) {
                                Text("‚Üì")
                                    .foregroundColor(.blue)
                                    .bold()
                                Text(boxOfficeMovie.rankIncrease)
                            }
                        }
                    }
                    HStack {
                        Text("ÏàúÏúÑ ÏßÑÏûÖ Ïó¨Î∂Ä")
                            .foregroundColor(.gray)
                            .shadow(radius: 0.2)
                        Text(boxOfficeMovie.isNewRanked)
                            .bold()
                    }
                }
                VStack(alignment: .leading) {
                    HStack {
                        Rectangle()
                            .frame(width: 4, height: 20)
                            .foregroundColor(.red)
                        Text("Ï†úÏûë Ï†ïÎ≥¥")
                            .bold()
                            .font(.title3)
                    }
                    HStack {
                        Text("Ï†úÏûë Ïó∞ÎèÑ:")
                            .foregroundColor(.gray)
                            .shadow(radius: 0.2)
                        Text(viewModel.detailInformation.productionYear)
                            .bold()
                    }
                    HStack {
                        Text("Í∞úÎ¥â Ïó∞ÎèÑ:")
                            .foregroundColor(.gray)
                            .shadow(radius: 0.2)
                        Text(viewModel.detailInformation.productionYear)
                            .bold()
                    }
                }
            }
        }
        .frame(alignment: .center)
        .navigationBarTitleDisplayMode(.inline)
        .navigationBarBackButtonHidden(true)
        .navigationBarItems(leading: Button("‚ùÆ" + " \(boxOfficeMovie.movieName)", action: {
            presentationMode.wrappedValue.dismiss()
        }))
        .onAppear {
            viewModel.fetchMovieDetail(movieCode: boxOfficeMovie.movieCode)
        }
    }
}

struct MovieInformationView: View {
    var movieDetail: MovieDetail
    var boxOfficeMovie: BoxOfficeMovie

    var body: some View {
        VStack(alignment: .leading) {
            HStack {
                Text("ÏòÅÌôîÎ™Ö:")
                    .bold()
                Text(boxOfficeMovie.movieName)
                    .bold()
            }
            .font(.title3)
            .padding(EdgeInsets(top: 0, leading: 0, bottom: 10, trailing: 0))
            HStack {
                Text("Í∞úÎ¥âÏùº:")
                    .bold()
                Text(boxOfficeMovie.openDate)
            }
            HStack {
                Text("Í¥ÄÍ∞ùÏàò:")
                    .bold()
                Text(boxOfficeMovie.audienceAttendance.numberOfPeople + "Î™Ö")
            }
            .padding(EdgeInsets(top: 0, leading: 0, bottom: 10, trailing: 0))
            HStack {
                Text("Ïû•Î•¥:")
                    .bold()
                HStack {
                    ForEach(movieDetail.genres, id: \.self) { genre in
                        Text(genre.genreName)
                    }
                }
            }
            HStack {
                Text("Í¥ÄÎûåÎì±Í∏â:")
                    .bold()
                if movieDetail.audits.isEmpty {
                    Text("")
                } else {
                    Text(movieDetail.audits[0].watchGradeName)
                }
            }
            .padding(EdgeInsets(top: 0, leading: 0, bottom: 10, trailing: 0))
            HStack {
                Text("ÏÉÅÏòÅÏãúÍ∞Ñ:")
                    .bold()
                Text(movieDetail.showTime + "Î∂Ñ")
            }
            HStack {
                Text("Í∞êÎèÖ:")
                    .bold()
                ForEach(movieDetail.directors, id: \.self) { director in
                    Text(director.peopleName)
                }
            }
        }
        .lineLimit(1)
        .minimumScaleFactor(0.5)
    }
}
